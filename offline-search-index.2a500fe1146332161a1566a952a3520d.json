[{"body":"About AlloyDB for PostgreSQL is a fully-managed, PostgreSQL-compatible database for demanding transactional workloads. It provides enterprise-grade performance and availability while maintaining 100% compatibility with open-source PostgreSQL.\nIf you are new to AlloyDB for PostgreSQL, you can create a free trial cluster.\nRequirements IAM Permissions By default, AlloyDB for PostgreSQL source uses the AlloyDB Go Connector to authorize and establish mTLS connections to your AlloyDB instance. The Go connector uses your Application Default Credentials (ADC) to authorize your connection to AlloyDB.\nIn addition to setting the ADC for your server, you need to ensure the IAM identity has been given the following IAM roles (or corresponding permissions):\nroles/alloydb.client roles/serviceusage.serviceUsageConsumer Networking AlloyDB supports connecting over both from external networks via the internet (public IP), and internal networks (private IP). For more information on choosing between the two options, see the AlloyDB page Connection overview.\nYou can configure the ipType parameter in your source configuration to public or private to match your cluster’s configuration. Regardless of which you choose, all connections use IAM-based authorization and are encrypted with mTLS.\nDatabase User Currently, this source only uses standard authentication. You will need to create a PostgreSQL user to login to the database with.\nExample sources: my-alloydb-pg-source: kind: \"alloydb-postgres\" project: \"my-project-id\" region: \"us-central1\" cluster: \"my-cluster\" instance: \"my-instance\" database: \"my_db\" user: \"my-user\" password: \"my-password\" # ipType: \"public\" Reference field type required description kind string true Must be “alloydb-postgres”. project string true Id of the GCP project that the cluster was created in (e.g. “my-project-id”). region string true Name of the GCP region that the cluster was created in (e.g. “us-central1”). cluster string true Name of the AlloyDB cluster (e.g. “my-cluster”). instance string true Name of the AlloyDB instance within the cluser (e.g. “my-instance”). database string true Name of the Postgres database to connect to (e.g. “my_db”). user string true Name of the Postgres user to connect as (e.g. “my-pg-user”). password string true Password of the Postgres user (e.g. “my-password”). ipType string false IP Type of the AlloyDB instance; must be one of public or private. Default: public. ","categories":"","description":"AlloyDB for PostgreSQL is a fully-managed, PostgreSQL-compatible database for  demanding transactional workloads.\n","excerpt":"AlloyDB for PostgreSQL is a fully-managed, PostgreSQL-compatible …","ref":"/resources/sources/alloydb-pg/","tags":"","title":"AlloyDB for PostgreSQL"},{"body":"About Cloud SQL for PostgreSQL is a fully-managed database service that helps you set up, maintain, manage, and administer your PostgreSQL relational databases on Google Cloud Platform.\nIf you are new to Cloud SQL for PostgreSQL, you can try creating and connecting to a database by following these instructions.\nRequirements IAM Permissions By default, this source uses the Cloud SQL Go Connector to authorize and establish mTLS connections to your Cloud SQL instance. The Go connector uses your Application Default Credentials (ADC) to authorize your connection to Cloud SQL.\nIn addition to setting the ADC for your server, you need to ensure the IAM identity has been given the following IAM roles (or corresponding permissions):\nroles/cloudsql.client NOTE: If you are connecting from Compute Engine, make sure your VM also has the proper scope to connect using the Cloud SQL Admin API.\nNetworking AlloyDB supports connecting over both from external networks via the internet (public IP), and internal networks (private IP). For more information on choosing between the two options, see the AlloyDB page Connection overview.\nYou can configure the ipType parameter in your source configuration to public or private to match your cluster’s configuration. Regardless of which you choose, all connections use IAM-based authorization and are encrypted with mTLS.\nDatabase User Current, this source only uses standard authentication. You will need to create a PostreSQL user to login to the database with.\nExample sources: my-cloud-sql-pg-source: kind: \"cloud-sql-postgres\" project: \"my-project-id\" region: \"us-central1\" instance: \"my-instance\" database: \"my_db\" user: \"my-user\" password: \"my-password\" # ipType: \"public\" Reference field type required description kind string true Must be “cloud-sql-postgres”. project string true Id of the GCP project that the cluster was created in (e.g. “my-project-id”). region string true Name of the GCP region that the cluster was created in (e.g. “us-central1”). instance string true Name of the Cloud SQL instance within the cluster (e.g. “my-instance”). database string true Name of the Postgres database to connect to (e.g. “my_db”). user string true Name of the Postgres user to connect as (e.g. “my-pg-user”). password string true Password of the Postgres user (e.g. “my-password”). ipType string false IP Type of the Cloud SQL instance; must be one of public or private. Default: public. ","categories":"","description":"Cloud SQL for PostgreSQL is a fully-managed database service for Postgres.\n","excerpt":"Cloud SQL for PostgreSQL is a fully-managed database service for …","ref":"/resources/sources/cloud-sql-pg/","tags":"","title":"Cloud SQL for PostgreSQL"},{"body":"Placeholder for top-level directory.\n","categories":"","description":"All of Toolbox's documentation. \n","excerpt":"All of Toolbox's documentation. \n","ref":"/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"How to get started with Toolbox\n","excerpt":"How to get started with Toolbox\n","ref":"/getting-started/","tags":"","title":"Getting Started"},{"body":"Introduction This is a placeholder for the introduction.\n","categories":"","description":"An introduction to Toolbox","excerpt":"An introduction to Toolbox","ref":"/getting-started/introduction/","tags":"","title":"Introduction"},{"body":"Neo4j is a powerful, open source graph database system with over 15 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.\nRequirements Database User This source only uses standard authentication. You will need to create a Neo4j user to log in to the database with, or use the default neo4j user if available.\nExample sources: my-neo4j-source: kind: \"neo4j\" uri: \"neo4j+s://xxxx.databases.neo4j.io:7687\" user: \"neo4j\" password: \"my-password\" database: \"neo4j\" Reference field type required description kind string true Must be “neo4j”. uri string true Connect URI (“bolt://localhost”, “neo4j+s://xxx.databases.neo4j.io”) user string true Name of the Neo4j user to connect as (e.g. “neo4j”). password string true Password of the Neo4j user (e.g. “my-password”). database string true Name of the Neo4j database to connect to (e.g. “neo4j”). ","categories":"","description":"Neo4j is a powerful, open source graph database system\n","excerpt":"Neo4j is a powerful, open source graph database system\n","ref":"/resources/sources/neo4j/","tags":"","title":"Neo4j"},{"body":"About PostgreSQL is a powerful, open source object-relational database system with over 35 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.\nRequirements Database User This source only uses standard authentication. You will need to create a PostreSQL user to login to the database with.\nExample sources: my-pg-source: kind: \"postgres\" host: \"127.0.0.1\" port: \"5432\" database: \"my_db\" user: \"my-user\" password: \"my-password\" Reference field type required description kind string true Must be “postgres”. host string true IP address to connect to (e.g. “127.0.0.1”) port string true Port to connect to (e.g. “5432”) database string true Name of the Postgres database to connect to (e.g. “my_db”). user string true Name of the Postgres user to connect as (e.g. “my-pg-user”). password string true Password of the Postgres user (e.g. “my-password”). ","categories":"","description":"PostgreSQL is a powerful, open source object-relational database.\n","excerpt":"PostgreSQL is a powerful, open source object-relational database.\n","ref":"/resources/sources/postgres/","tags":"","title":"PostgreSQL"},{"body":"A Source represents a data sources that a tool can interact with. You can define Sources as a map in the sources section of your tools.yaml file. Typically, a source configuration will contain any information needed to connect with and interact with the database.\nsources: my-cloud-sql-source: kind: cloud-sql-postgres project: my-project-id region: us-central1 instance: my-instance-name database: my_db user: my-user password: my-password In implementation, each source is a different connection pool or client that used to connect to the database and execute the tool.\nAvailable Sources ","categories":"","description":"Sources represent your different data sources that a tool can interact with.\n","excerpt":"Sources represent your different data sources that a tool can interact …","ref":"/resources/sources/","tags":"","title":"Sources"},{"body":"Spanner Source Spanner is a fully managed, mission-critical database service that brings together relational, graph, key-value, and search. It offers transactional consistency at global scale, automatic, synchronous replication for high availability, and support for two SQL dialects: GoogleSQL (ANSI 2011 with extensions) and PostgreSQL.\nIf you are new to Spanner, you can try to create and query a database using the Google Cloud console.\nRequirements IAM Permissions Spanner uses Identity and Access Management (IAM) to control user and group access to Spanner resources at the project, Spanner instance, and Spanner database levels. Toolbox will use your Application Default Credentials (ADC) to authorize and authenticate when interacting with Spanner.\nIn addition to setting the ADC for your server, you need to ensure the IAM identity has been given the correct IAM permissions for the query provided. See Apply IAM roles for more information on applying IAM permissions and roles to an identity.\nExample sources: my-spanner-source: kind: \"spanner\" project: \"my-project-id\" instance: \"my-instance\" database: \"my_db\" # dialect: \"googlesql\" Reference field type required description kind string true Must be “spanner”. project string true Id of the GCP project that the cluster was created in (e.g. “my-project-id”). instance string true Name of the Spanner instance. database string true Name of the database on the Spanner instance dialect string false Name of the dialect type of the Spanner database, must be either googlesql or postgresql. Default: googlesql. ","categories":"","description":"Spanner is a fully managed database service from Google Cloud that combines  relational, key-value, graph, and search capabilities.\n","excerpt":"Spanner is a fully managed database service from Google Cloud that …","ref":"/resources/sources/spanner/","tags":"","title":"Spanner"},{"body":"","categories":"","description":"An overview of Toolbox's architecture","excerpt":"An overview of Toolbox's architecture","ref":"/concepts/overview/","tags":"","title":"Architecture"},{"body":"","categories":"","description":"Some core concepts in Toolbox","excerpt":"Some core concepts in Toolbox","ref":"/concepts/","tags":"","title":"Concepts"},{"body":"","categories":"","description":"How to participate in Toolbox Development","excerpt":"How to participate in Toolbox Development","ref":"/development/contributing/","tags":"","title":"Contributing"},{"body":"Before you begin This guide assumes you have already done the following:\nInstalled Python 3.9+ Installed PostgreSQL 16+ and the psql client Completed setup for langchain-vertexai package (or are comfortable switching the example to a different LLM model) Step 1: Set up your database In this section, we will create a database, insert some data that needs to be access by our agent, and create a database user for Toolbox to connect with.\nConnect to postgres using the psql command:\npsql -U postgres Here, postgres denotes the default postgres superuser.\nCreate a new database and a new user:\nCREATE USER toolbox_user WITH PASSWORD 'my-password'; CREATE DATABASE toolbox_db; GRANT ALL PRIVILEGES ON DATABASE toolbox_db TO toolbox_user; ALTER DATABASE toolbox_db OWNER TO toolbox_user; NOTE: For a real application, it’s best to follow the principle of least permission and only grant the privileges your application needs.\nEnd the database session:\n\\q Connect to your database with your new user:\npsql -U toolbox_user -d toolbox_db Create a table using the following command:\nCREATE TABLE hotels( id INTEGER NOT NULL PRIMARY KEY, name VARCHAR NOT NULL, location VARCHAR NOT NULL, price_tier VARCHAR NOT NULL, checkin_date DATE NOT NULL, checkout_date DATE NOT NULL, booked BIT NOT NULL ); Insert data into the table.\nINSERT INTO hotels(id, name, location, price_tier, checkin_date, checkout_date, booked) VALUES (1, 'Hilton Basel', 'Basel', 'Luxury', '2024-04-22', '2024-04-20', B'0'), (2, 'Marriott Zurich', 'Zurich', 'Upscale', '2024-04-14', '2024-04-21', B'0'), (3, 'Hyatt Regency Basel', 'Basel', 'Upper Upscale', '2024-04-02', '2024-04-20', B'0'), (4, 'Radisson Blu Lucerne', 'Lucerne', 'Midscale', '2024-04-24', '2024-04-05', B'0'), (5, 'Best Western Bern', 'Bern', 'Upper Midscale', '2024-04-23', '2024-04-01', B'0'), (6, 'InterContinental Geneva', 'Geneva', 'Luxury', '2024-04-23', '2024-04-28', B'0'), (7, 'Sheraton Zurich', 'Zurich', 'Upper Upscale', '2024-04-27', '2024-04-02', B'0'), (8, 'Holiday Inn Basel', 'Basel', 'Upper Midscale', '2024-04-24', '2024-04-09', B'0'), (9, 'Courtyard Zurich', 'Zurich', 'Upscale', '2024-04-03', '2024-04-13', B'0'), (10, 'Comfort Inn Bern', 'Bern', 'Midscale', '2024-04-04', '2024-04-16', B'0'); End the database session:\n\\q Step 2: Install and configure Toolbox In this section, we will download Toolbox, configure our tools in a tools.yaml, and then run the Toolbox server.\nDownload the latest version of Toolbox as a binary:\nNOTE: Use the correct binary corresponding to your OS and CPU architecture.\nexport OS=\"linux/amd64\" # one of linux/amd64, darwin/arm64, darwin/amd64, or windows/amd64 curl -O https://storage.googleapis.com/genai-toolbox/v0.0.5/$OS/toolbox Make the binary executable:\nchmod +x toolbox Write the following into a tools.yaml file. Be sure to update any fields such as user, password, or database that you may have customized in the previous step.\nsources: my-pg-source: kind: postgres host: 127.0.0.1 port: 5432 database: toolbox_db user: toolbox_user password: my-password tools: # Define the 5 tools we want our agent to have # for more info on tools check out the \"Resources\" section of the docs search-hotels-by-name: kind: postgres-sql source: my-pg-source description: Search for hotels based on name. parameters: - name: name type: string description: The name of the hotel. statement: SELECT * FROM hotels WHERE name ILIKE '%' || $1 || '%'; search-hotels-by-location: kind: postgres-sql source: my-pg-source description: Search for hotels based on location. parameters: - name: location type: string description: The location of the hotel. statement: SELECT * FROM hotels WHERE location ILIKE '%' || $1 || '%'; book-hotel: kind: postgres-sql source: my-pg-source description: \u003e- Book a hotel by its ID. Returns a message indicating whether the hotel was successfully booked or not. parameters: - name: hotel_id type: string description: The ID of the hotel to book. statement: UPDATE hotels SET booked = B'1' WHERE id = $1; update-hotel: kind: postgres-sql source: my-pg-source description: \u003e- Update a hotel's check-in and check-out dates by its ID. Returns a message indicating whether the hotel was successfully updated or not. parameters: - name: hotel_id type: string description: The ID of the hotel to update. - name: checkin_date type: string description: The new check-in date of the hotel. - name: checkout_date type: string description: The new check-out date of the hotel. statement: \u003e- UPDATE hotels SET checkin_date = CAST($2 as date), checkout_date = CAST($3 as date) WHERE id = $1; cancel-hotel: kind: postgres-sql source: my-pg-source description: Cancel a hotel by its ID. parameters: - name: hotel_id type: string description: The ID of the hotel to cancel. statement: UPDATE hotels SET booked = B'0' WHERE id = $1; Run the Toolbox server, pointing to the tools.yaml file created earlier:\n./toolbox --tools_file \"tools.yaml\" Step 3: Connect your agent to Toolbox In this section, we will write and run a LangGraph agent that will load the Tools from Toolbox.\nIn a new terminal,install the toolbox_langchain_sdk package.\nNOTE: toolbox_langchain_sdk package is not yet published to PyPi. Install it directly from the git repo instead:\npip install -e \"git+https://github.com/googleapis/genai-toolbox#egg=toolbox-langchain-sdk\u0026subdirectory=sdks/langchain\" pip install toolbox-langchain-sdk Install other required dependencies:\npip install langgraph langchain-google-vertexai Create a new file named langgraph_hotel_agent.py and copy the following code to create a LangGraph agent, based on their Hotels example:\nimport asyncio from langgraph.prebuilt import create_react_agent from langchain_google_vertexai import ChatVertexAI from langgraph.checkpoint.memory import MemorySaver from toolbox_langchain_sdk import ToolboxClient prompt = \"\"\" You're a helpful hotel assistant. You handle hotel searching, booking and cancellations. When the user searches for a hotel, mention it's name, id, location and price tier. Always mention hotel ids while performing any searches. This is very important for any operations. For any bookings or cancellations, please provide the appropriate confirmation. Be sure to update checkin or checkout dates if mentioned by the user. Don't ask for confirmations from the user. \"\"\" queries = [ \"Find hotels in Basel with Basel in it's name.\", \"Can you book the Hilton Basel for me?\", \"Oh wait, this is too expensive. Please cancel it and book the Hyatt Regency instead.\", \"My check in dates would be from April 10, 2024 to April 19, 2024.\", ] async def main(): # TODO(reader): replace this with another model if needed model = ChatVertexAI(model_name=\"gemini-pro\") # Load the tools from the Toolbox server client = ToolboxClient(\"http://127.0.0.1:5000\") tools = await client.load_toolset() agent = create_react_agent(model, tools, checkpointer=MemorySaver()) config = {\"configurable\": {\"thread_id\": \"thread-1\"}} for query in queries: inputs = {\"messages\": [(\"user\", prompt + query)]} response = await agent.ainvoke(inputs, stream_mode=\"values\", config=config) print(response[\"messages\"][-1].content) asyncio.run(main()) Run your agent, and observe the results:\npython langgraph_hotel_agent.py ","categories":"","description":"How to get started running Toolbox locally with Python and PostgreSQL. \n","excerpt":"How to get started running Toolbox locally with Python and PostgreSQL. …","ref":"/getting-started/local_quickstart/","tags":"","title":"Local Quickstart"},{"body":"","categories":"","description":"List of reference documentation for resources in Toolbox","excerpt":"List of reference documentation for resources in Toolbox","ref":"/resources/","tags":"","title":"Resources"},{"body":"","categories":"","description":"A list of resources related to development of Toolbox","excerpt":"A list of resources related to development of Toolbox","ref":"/development/","tags":"","title":"Development"},{"body":"Cloud SQL for SQL Server Source Cloud SQL for SQL Server is a managed database service that helps you set up, maintain, manage, and administer your SQL Server databases on Google Cloud.\nIf you are new to Cloud SQL for SQL Server, you can try creating and connecting to a database by following these instructions.\nRequirements IAM Identity By default, this source uses the Cloud SQL Go Connector to authorize and establish mTLS connections to your Cloud SQL instance. The Go connector uses your Application Default Credentials (ADC) to authorize your connection to Cloud SQL.\nIn addition to setting the ADC for your server, you need to ensure the IAM identity has been given the following IAM roles:\nroles/cloudsql.client Network Path Currently, Cloud SQL for SQL Server supports connection over both private IP and public IP. Set the ipType parameter in your source configuration to public or private.\nDatabase User Currently, this source only uses standard authentication. You will need to create a SQL Server user to login to the database with.\nExample sources: my-cloud-sql-mssql-instance: kind: cloud-sql-mssql project: my-project region: my-region instance: my-instance database: my_db ipAddress: localhost ipType: public Reference field type required description kind string true Must be “cloud-sql-postgres”. project string true Id of the GCP project that the cluster was created in (e.g. “my-project-id”). region string true Name of the GCP region that the cluster was created in (e.g. “us-central1”). instance string true Name of the Cloud SQL instance within the cluser (e.g. “my-instance”). database string true Name of the Cloud SQL database to connect to (e.g. “my_db”). ipAddress string true IP address of the Cloud SQL instance to connect to. ipType string true IP Type of the Cloud SQL instance, must be either public or private. Default: public. user string true Name of the Postgres user to connect as (e.g. “my-pg-user”). password string true Password of the Postgres user (e.g. “my-password”). ","categories":"","description":"","excerpt":"Cloud SQL for SQL Server Source Cloud SQL for SQL Server is a managed …","ref":"/resources/sources/cloud-sql-mssql/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]
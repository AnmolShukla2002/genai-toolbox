[{"body":"About AlloyDB for PostgreSQL is a fully-managed, PostgreSQL-compatible database for demanding transactional workloads. It provides enterprise-grade performance and availability while maintaining 100% compatibility with open-source PostgreSQL.\nIf you are new to AlloyDB for PostgreSQL, you can create a free trial cluster.\nRequirements IAM Permissions By default, AlloyDB for PostgreSQL source uses the AlloyDB Go Connector to authorize and establish mTLS connections to your AlloyDB instance. The Go connector uses your Application Default Credentials (ADC) to authorize your connection to AlloyDB.\nIn addition to setting the ADC for your server, you need to ensure the IAM identity has been given the following IAM roles (or corresponding permissions):\nroles/alloydb.client roles/serviceusage.serviceUsageConsumer Networking AlloyDB supports connecting over both from external networks via the internet (public IP), and internal networks (private IP). For more information on choosing between the two options, see the AlloyDB page Connection overview.\nYou can configure the ipType parameter in your source configuration to public or private to match your cluster’s configuration. Regardless of which you choose, all connections use IAM-based authorization and are encrypted with mTLS.\nDatabase User Currently, this source only uses standard authentication. You will need to create a PostgreSQL user to login to the database with.\nExample sources: my-alloydb-pg-source: kind: \"alloydb-postgres\" project: \"my-project-id\" region: \"us-central1\" cluster: \"my-cluster\" instance: \"my-instance\" database: \"my_db\" user: \"my-user\" password: \"my-password\" # ipType: \"public\" Reference field type required description kind string true Must be “alloydb-postgres”. project string true Id of the GCP project that the cluster was created in (e.g. “my-project-id”). region string true Name of the GCP region that the cluster was created in (e.g. “us-central1”). cluster string true Name of the AlloyDB cluster (e.g. “my-cluster”). instance string true Name of the AlloyDB instance within the cluser (e.g. “my-instance”). database string true Name of the Postgres database to connect to (e.g. “my_db”). user string true Name of the Postgres user to connect as (e.g. “my-pg-user”). password string true Password of the Postgres user (e.g. “my-password”). ipType string false IP Type of the AlloyDB instance; must be one of public or private. Default: public. ","categories":"","description":"AlloyDB for PostgreSQL is a fully-managed, PostgreSQL-compatible database for  demanding transactional workloads.\n","excerpt":"AlloyDB for PostgreSQL is a fully-managed, PostgreSQL-compatible …","ref":"/previews/PR-235/resources/sources/alloydb-pg/","tags":"","title":"AlloyDB for PostgreSQL"},{"body":"About Cloud SQL for PostgreSQL is a fully-managed database service that helps you set up, maintain, manage, and administer your PostgreSQL relational databases on Google Cloud Platform.\nIf you are new to Cloud SQL for PostgreSQL, you can try creating and connecting to a database by following these instructions.\nRequirements IAM Permissions By default, this source uses the Cloud SQL Go Connector to authorize and establish mTLS connections to your Cloud SQL instance. The Go connector uses your Application Default Credentials (ADC) to authorize your connection to Cloud SQL.\nIn addition to setting the ADC for your server, you need to ensure the IAM identity has been given the following IAM roles (or corresponding permissions):\nroles/cloudsql.client NOTE: If you are connecting from Compute Engine, make sure your VM also has the proper scope to connect using the Cloud SQL Admin API.\nNetworking AlloyDB supports connecting over both from external networks via the internet (public IP), and internal networks (private IP). For more information on choosing between the two options, see the AlloyDB page Connection overview.\nYou can configure the ipType parameter in your source configuration to public or private to match your cluster’s configuration. Regardless of which you choose, all connections use IAM-based authorization and are encrypted with mTLS.\nDatabase User Current, this source only uses standard authentication. You will need to create a PostreSQL user to login to the database with.\nExample sources: my-cloud-sql-pg-source: kind: \"cloud-sql-postgres\" project: \"my-project-id\" region: \"us-central1\" instance: \"my-instance\" database: \"my_db\" user: \"my-user\" password: \"my-password\" # ipType: \"public\" Reference field type required description kind string true Must be “cloud-sql-postgres”. project string true Id of the GCP project that the cluster was created in (e.g. “my-project-id”). region string true Name of the GCP region that the cluster was created in (e.g. “us-central1”). instance string true Name of the Cloud SQL instance within the cluster (e.g. “my-instance”). database string true Name of the Postgres database to connect to (e.g. “my_db”). user string true Name of the Postgres user to connect as (e.g. “my-pg-user”). password string true Password of the Postgres user (e.g. “my-password”). ipType string false IP Type of the Cloud SQL instance; must be one of public or private. Default: public. ","categories":"","description":"Cloud SQL for PostgreSQL is a fully-managed database service for Postgres.\n","excerpt":"Cloud SQL for PostgreSQL is a fully-managed database service for …","ref":"/previews/PR-235/resources/sources/cloud-sql-pg/","tags":"","title":"Cloud SQL for PostgreSQL"},{"body":"Placeholder for top-level directory.\n","categories":"","description":"All of Toolbox's documentation. \n","excerpt":"All of Toolbox's documentation. \n","ref":"/previews/PR-235/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"How to get started with Toolbox\n","excerpt":"How to get started with Toolbox\n","ref":"/previews/PR-235/getting-started/","tags":"","title":"Getting Started"},{"body":"Introduction This is a placeholder for the introduction.\n","categories":"","description":"An introduction to Toolbox","excerpt":"An introduction to Toolbox","ref":"/previews/PR-235/getting-started/introduction/","tags":"","title":"Introduction"},{"body":"About A “mssql” tool executes a pre-defined SQL statement against a SQL Server database. It’s compatible with any of the following sources:\ncloud-sql-mssql Toolbox supports the prepare statement syntax of MS SQL Server and expects parameters in the SQL query to be in the form of either @Name or @p1 to @pN (ordinal position).\ndb.QueryContext(ctx, `select * from t where ID = @ID and Name = @p2;`, sql.Named(\"ID\", 6), \"Bob\") Example tools: search_flights_by_number: kind: mssql source: my-instance statement: | SELECT * FROM flights WHERE airline = @airline AND flight_number = @number LIMIT 10 description: | Use this tool to get information for a specific flight. Takes an airline code and flight number and returns info on the flight. Do NOT use this tool with a flight id. Do NOT guess an airline code or flight number. A airline code is a code for an airline service consisting of two-character airline designator and followed by flight number, which is 1 to 4 digit number. For example, if given CY 0123, the airline is \"CY\", and flight_number is \"123\". Another example for this is DL 1234, the airline is \"DL\", and flight_number is \"1234\". If the tool returns more than one option choose the date closes to today. Example: {{ \"airline\": \"CY\", \"flight_number\": \"888\", }} Example: {{ \"airline\": \"DL\", \"flight_number\": \"1234\", }} parameters: - name: airline type: string description: Airline unique 2 letter identifier - name: number type: string description: 1 to 4 digit number Reference field type required description kind string true Must be “mssql”. source string true Name of the source the T-SQL statement should execute on. description string true Description of the tool that is passed to the LLM statement string true SQL statement to execute. parameters parameter true List of parameters that will be inserted into the SQL statement. ","categories":"","description":"A \"mssql\" tool executes a pre-defined SQL statement against a SQL Server database.\n","excerpt":"A \"mssql\" tool executes a pre-defined SQL statement against a SQL …","ref":"/previews/PR-235/resources/tools/mssql/","tags":"","title":"mssql"},{"body":"Neo4j is a powerful, open source graph database system with over 15 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.\nRequirements Database User This source only uses standard authentication. You will need to create a Neo4j user to log in to the database with, or use the default neo4j user if available.\nExample sources: my-neo4j-source: kind: \"neo4j\" uri: \"neo4j+s://xxxx.databases.neo4j.io:7687\" user: \"neo4j\" password: \"my-password\" database: \"neo4j\" Reference field type required description kind string true Must be “neo4j”. uri string true Connect URI (“bolt://localhost”, “neo4j+s://xxx.databases.neo4j.io”) user string true Name of the Neo4j user to connect as (e.g. “neo4j”). password string true Password of the Neo4j user (e.g. “my-password”). database string true Name of the Neo4j database to connect to (e.g. “neo4j”). ","categories":"","description":"Neo4j is a powerful, open source graph database system\n","excerpt":"Neo4j is a powerful, open source graph database system\n","ref":"/previews/PR-235/resources/sources/neo4j/","tags":"","title":"Neo4j"},{"body":"About A “neo4j-cypher” tool executes a pre-defined Cypher statement against a Neo4j database. It’s compatible with any of the following sources:\nneo4j The specified Cypher statement is executed as a parameterized statement, and specified parameters will be used according to their name: e.g. $id.\nExample tools: search_movies_by_actor: kind: neo4j-cypher source: my-neo4j-movies-instance statement: | MATCH (m:Movie)\u003c-[:ACTED_IN]-(p:Person) WHERE p.name = $name AND m.year \u003e $year RETURN m.title, m.year LIMIT 10 description: | Use this tool to get a list of movies for a specific actor and a given minium release year. Takes an full actor name, e.g. \"Tom Hanks\" and a year e.g 1993 and returns a list of movie titles and release years. Do NOT use this tool with a movie title. Do NOT guess an actor name, Do NOT guess a year. A actor name is a fully qualified name with first and last name separated by a space. For example, if given \"Hanks, Tom\" the actor name is \"Tom Hanks\". If the tool returns more than one option choose the most recent movies. Example: {{ \"name\": \"Meg Ryan\", \"year\": 1993 }} Example: {{ \"name\": \"Clint Eastwood\", \"year\": 2000 }} parameters: - name: name type: string description: Full actor name, \"firstname lastname\" - name: year type: integer description: 4 digit number starting in 1900 up to the current year Reference field type required description kind string true Must be “neo4j-cypher”. source string true Name of the source the Cypher query should execute on. description string true Description of the tool statement string true Cypher statement to execute parameters parameter true List of parameters that will be used with the Cypher statement. ","categories":"","description":"A \"neo4j-cypher\" tool executes a pre-defined cypher statement against a Neo4j database.\n","excerpt":"A \"neo4j-cypher\" tool executes a pre-defined cypher statement against …","ref":"/previews/PR-235/resources/tools/neo4j-cypher/","tags":"","title":"neo4j-cypher"},{"body":"About A “postgres-sql” tool executes a pre-defined SQL statement against a Postgres database. It’s compatible with any of the following sources:\nalloydb-postgres cloud-sql-postgres postgres The specified SQL statement is executed as a prepared statement, and specified parameters will inserted according to their position: e.g. “$1” will be the first parameter specified, “$@” will be the second parameter, and so on.\nExample tools: search_flights_by_number: kind: postgres-sql source: my-pg-instance statement: | SELECT * FROM flights WHERE airline = $1 AND flight_number = $2 LIMIT 10 description: | Use this tool to get information for a specific flight. Takes an airline code and flight number and returns info on the flight. Do NOT use this tool with a flight id. Do NOT guess an airline code or flight number. A airline code is a code for an airline service consisting of two-character airline designator and followed by flight number, which is 1 to 4 digit number. For example, if given CY 0123, the airline is \"CY\", and flight_number is \"123\". Another example for this is DL 1234, the airline is \"DL\", and flight_number is \"1234\". If the tool returns more than one option choose the date closes to today. Example: {{ \"airline\": \"CY\", \"flight_number\": \"888\", }} Example: {{ \"airline\": \"DL\", \"flight_number\": \"1234\", }} parameters: - name: airline type: string description: Airline unique 2 letter identifier - name: flight_number type: string description: 1 to 4 digit number Reference field type required description kind string true Must be “postgres-generic”. source string true Name of the source the SQL should execute on. description string true Port to connect to (e.g. “5432”) statement string true SQL statement to execute on. parameters parameter true List of parameters that will be inserted into the SQL statement. ","categories":"","description":"A \"postgres-sql\" tool executes a pre-defined SQL statement against a Postgres database.\n","excerpt":"A \"postgres-sql\" tool executes a pre-defined SQL statement against a …","ref":"/previews/PR-235/resources/tools/postgres-sql/","tags":"","title":"postgres-sql"},{"body":"About PostgreSQL is a powerful, open source object-relational database system with over 35 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.\nRequirements Database User This source only uses standard authentication. You will need to create a PostreSQL user to login to the database with.\nExample sources: my-pg-source: kind: \"postgres\" host: \"127.0.0.1\" port: \"5432\" database: \"my_db\" user: \"my-user\" password: \"my-password\" Reference field type required description kind string true Must be “postgres”. host string true IP address to connect to (e.g. “127.0.0.1”) port string true Port to connect to (e.g. “5432”) database string true Name of the Postgres database to connect to (e.g. “my_db”). user string true Name of the Postgres user to connect as (e.g. “my-pg-user”). password string true Password of the Postgres user (e.g. “my-password”). ","categories":"","description":"PostgreSQL is a powerful, open source object-relational database.\n","excerpt":"PostgreSQL is a powerful, open source object-relational database.\n","ref":"/previews/PR-235/resources/sources/postgres/","tags":"","title":"PostgreSQL"},{"body":"A Source represents a data sources that a tool can interact with. You can define Sources as a map in the sources section of your tools.yaml file. Typically, a source configuration will contain any information needed to connect with and interact with the database.\nsources: my-cloud-sql-source: kind: cloud-sql-postgres project: my-project-id region: us-central1 instance: my-instance-name database: my_db user: my-user password: my-password In implementation, each source is a different connection pool or client that used to connect to the database and execute the tool.\nAvailable Sources ","categories":"","description":"Sources represent your different data sources that a tool can interact with.\n","excerpt":"Sources represent your different data sources that a tool can interact …","ref":"/previews/PR-235/resources/sources/","tags":"","title":"Sources"},{"body":"Spanner Source Spanner is a fully managed, mission-critical database service that brings together relational, graph, key-value, and search. It offers transactional consistency at global scale, automatic, synchronous replication for high availability, and support for two SQL dialects: GoogleSQL (ANSI 2011 with extensions) and PostgreSQL.\nIf you are new to Spanner, you can try to create and query a database using the Google Cloud console.\nRequirements IAM Permissions Spanner uses Identity and Access Management (IAM) to control user and group access to Spanner resources at the project, Spanner instance, and Spanner database levels. Toolbox will use your Application Default Credentials (ADC) to authorize and authenticate when interacting with Spanner.\nIn addition to setting the ADC for your server, you need to ensure the IAM identity has been given the correct IAM permissions for the query provided. See Apply IAM roles for more information on applying IAM permissions and roles to an identity.\nExample sources: my-spanner-source: kind: \"spanner\" project: \"my-project-id\" instance: \"my-instance\" database: \"my_db\" # dialect: \"googlesql\" Reference field type required description kind string true Must be “spanner”. project string true Id of the GCP project that the cluster was created in (e.g. “my-project-id”). instance string true Name of the Spanner instance. database string true Name of the database on the Spanner instance dialect string false Name of the dialect type of the Spanner database, must be either googlesql or postgresql. Default: googlesql. ","categories":"","description":"Spanner is a fully managed database service from Google Cloud that combines  relational, key-value, graph, and search capabilities.\n","excerpt":"Spanner is a fully managed database service from Google Cloud that …","ref":"/previews/PR-235/resources/sources/spanner/","tags":"","title":"Spanner"},{"body":"A “spanner-sql” tool executes a pre-defined SQL statement (either googlesql or postgresql) against Spanner database. It’s compatible with any of the following sources:\nspanner For googlesql dialect, the specified SQL statement is executed as a data manipulation language (DML) statements, and specified parameters will inserted according to their name: e.g. “@name”.\nFor postgresql dialect, the specified SQL statement is executed as a prepared statement, and specified parameters will inserted according to their position: e.g. “$1” will be the first parameter specified, “$@” will be the second parameter, and so on.\nExample For googlesql dialect:\ntools: search_flights_by_number: kind: spanner source: my-spanner-instance statement: | SELECT * FROM flights WHERE airline = @airline AND flight_number = @flight_number LIMIT 10 description: | Use this tool to get information for a specific flight. Takes an airline code and flight number and returns info on the flight. Do NOT use this tool with a flight id. Do NOT guess an airline code or flight number. A airline code is a code for an airline service consisting of two-character airline designator and followed by flight number, which is 1 to 4 digit number. For example, if given CY 0123, the airline is \"CY\", and flight_number is \"123\". Another example for this is DL 1234, the airline is \"DL\", and flight_number is \"1234\". If the tool returns more than one option choose the date closes to today. Example: {{ \"airline\": \"CY\", \"flight_number\": \"888\", }} Example: {{ \"airline\": \"DL\", \"flight_number\": \"1234\", }} parameters: - name: airline type: string description: Airline unique 2 letter identifier - name: flight_number type: string description: 1 to 4 digit number For postgresql dialect:\ntools: search_flights_by_number: kind: spanner source: my-spanner-instance statement: | SELECT * FROM flights WHERE airline = $1 AND flight_number = $2 LIMIT 10 description: | Use this tool to get information for a specific flight. Takes an airline code and flight number and returns info on the flight. Do NOT use this tool with a flight id. Do NOT guess an airline code or flight number. A airline code is a code for an airline service consisting of two-character airline designator and followed by flight number, which is 1 to 4 digit number. For example, if given CY 0123, the airline is \"CY\", and flight_number is \"123\". Another example for this is DL 1234, the airline is \"DL\", and flight_number is \"1234\". If the tool returns more than one option choose the date closes to today. Example: {{ \"airline\": \"CY\", \"flight_number\": \"888\", }} Example: {{ \"airline\": \"DL\", \"flight_number\": \"1234\", }} parameters: - name: airline type: string description: Airline unique 2 letter identifier - name: flight_number type: string description: 1 to 4 digit number Reference field type required description kind string true Must be “postgres-generic”. source string true Name of the source the SQL should execute on. description string true Port to connect to (e.g. “5432”) statement string true SQL statement to execute on. parameters parameter true List of parameters that will be inserted into the SQL statement. ","categories":"","description":"A \"spanner-sql\" tool executes a pre-defined SQL statement against a Postgres database.\n","excerpt":"A \"spanner-sql\" tool executes a pre-defined SQL statement against a …","ref":"/previews/PR-235/resources/tools/spanner-sql/","tags":"","title":"spanner-sql"},{"body":"","categories":"","description":"An overview of Toolbox's architecture","excerpt":"An overview of Toolbox's architecture","ref":"/previews/PR-235/concepts/overview/","tags":"","title":"Architecture"},{"body":"","categories":"","description":"Some core concepts in Toolbox","excerpt":"Some core concepts in Toolbox","ref":"/previews/PR-235/concepts/","tags":"","title":"Concepts"},{"body":"","categories":"","description":"How to participate in Toolbox Development","excerpt":"How to participate in Toolbox Development","ref":"/previews/PR-235/development/contributing/","tags":"","title":"Contributing"},{"body":"A tool represents an action your agent can take, such as running a SQL statement. You can define Tools as a map in the sources section of your tools.yaml file. Typically, a tool will require a source to act on:\ntools: search_flights_by_number: kind: postgres-sql source: my-pg-instance statement: | SELECT * FROM flights WHERE airline = $1 AND flight_number = $2 LIMIT 10 description: | Use this tool to get information for a specific flight. Takes an airline code and flight number and returns info on the flight. Do NOT use this tool with a flight id. Do NOT guess an airline code or flight number. A airline code is a code for an airline service consisting of two-character airline designator and followed by flight number, which is 1 to 4 digit number. For example, if given CY 0123, the airline is \"CY\", and flight_number is \"123\". Another example for this is DL 1234, the airline is \"DL\", and flight_number is \"1234\". If the tool returns more than one option choose the date closes to today. Example: {{ \"airline\": \"CY\", \"flight_number\": \"888\", }} Example: {{ \"airline\": \"DL\", \"flight_number\": \"1234\", }} parameters: - name: airline type: string description: Airline unique 2 letter identifier - name: flight_number type: string description: 1 to 4 digit number Specifying Parameters Parameters for each Tool will define what inputs the agent will need to provide to invoke them. Parameters should be pass as a list of Parameter objects:\nparameters: - name: airline type: string description: Airline unique 2 letter identifier - name: flight_number type: string description: 1 to 4 digit number Basic Parameters Basic parameters types include string, integer, float, boolean types. In most cases, the description will be provided to the LLM as context on specifying the parameter.\nparameters: - name: airline type: string description: Airline unique 2 letter identifier field type required description name string true Name of the parameter. type string true Must be one of “string”, “integer”, “float”, “boolean” “array” description string true Natural language description of the parameter to describe it to the agent. Array Parameters The array type is a list of items passed in as a single parameter. This type requires another Parameter to be specified under the items field:\nparameters: - name: preffered_airlines type: array description: A list of airline, ordered by preference. items: name: name type: string description: Name of the airline. field type required description name string true Name of the parameter. type string true Must be “array” description string true Natural language description of the parameter to describe it to the agent. items parameter object true Specify a Parameter object for the type of the values in the array. Authenticated Parameters Authenticated parameters automatically populate their values with user information decoded from your ID tokens passed in from request headers. They do not take input values in request bodies like other parameters. Instead, specify your configured authSources and corresponding claim fields in ID tokens to tell Toolbox which values they should be auto-populated with.\ntools: search_flights_by_user_id: kind: postgres-sql source: my-pg-instance statement: | SELECT * FROM flights WHERE user_id = $1 parameters: - name: user_id type: string description: Auto-populated from Google login authSources: # Refer to one of the `authSources` defined - name: my-google-auth # `sub` is the OIDC claim field for user ID field: sub field type required description name string true Name of the authSources used to verify the OIDC auth token. field string true Claim field decoded from the OIDC token used to auto-populate this parameter. Authorized Invocations You can require an authorization check for any Tool invocation request by specifying an authRequired field. Specify a list of authSources defined in the previous section.\ntools: search_all_flight: kind: postgres-sql source: my-pg-instance statement: | SELECT * FROM flights # A list of `authSources` defined previously authRequired: - my-google-auth - other-auth-service Kinds of tools ","categories":"","description":"Tools represent actions actions an agent can take to interact with a datasource.  \n","excerpt":"Tools represent actions actions an agent can take to interact with a …","ref":"/previews/PR-235/resources/tools/","tags":"","title":"Tools"},{"body":"","categories":"","description":"List of reference documentation for resources in Toolbox","excerpt":"List of reference documentation for resources in Toolbox","ref":"/previews/PR-235/resources/","tags":"","title":"Resources"},{"body":"","categories":"","description":"A list of resources related to development of Toolbox","excerpt":"A list of resources related to development of Toolbox","ref":"/previews/PR-235/development/","tags":"","title":"Development"},{"body":"Cloud SQL for SQL Server Source Cloud SQL for SQL Server is a managed database service that helps you set up, maintain, manage, and administer your SQL Server databases on Google Cloud.\nIf you are new to Cloud SQL for SQL Server, you can try creating and connecting to a database by following these instructions.\nRequirements IAM Identity By default, this source uses the Cloud SQL Go Connector to authorize and establish mTLS connections to your Cloud SQL instance. The Go connector uses your Application Default Credentials (ADC) to authorize your connection to Cloud SQL.\nIn addition to setting the ADC for your server, you need to ensure the IAM identity has been given the following IAM roles:\nroles/cloudsql.client Network Path Currently, Cloud SQL for SQL Server supports connection over both private IP and public IP. Set the ipType parameter in your source configuration to public or private.\nDatabase User Currently, this source only uses standard authentication. You will need to create a SQL Server user to login to the database with.\nExample sources: my-cloud-sql-mssql-instance: kind: cloud-sql-mssql project: my-project region: my-region instance: my-instance database: my_db ipAddress: localhost ipType: public Reference field type required description kind string true Must be “cloud-sql-postgres”. project string true Id of the GCP project that the cluster was created in (e.g. “my-project-id”). region string true Name of the GCP region that the cluster was created in (e.g. “us-central1”). instance string true Name of the Cloud SQL instance within the cluser (e.g. “my-instance”). database string true Name of the Cloud SQL database to connect to (e.g. “my_db”). ipAddress string true IP address of the Cloud SQL instance to connect to. ipType string true IP Type of the Cloud SQL instance, must be either public or private. Default: public. user string true Name of the Postgres user to connect as (e.g. “my-pg-user”). password string true Password of the Postgres user (e.g. “my-password”). ","categories":"","description":"","excerpt":"Cloud SQL for SQL Server Source Cloud SQL for SQL Server is a managed …","ref":"/previews/PR-235/resources/sources/cloud-sql-mssql/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/previews/PR-235/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/previews/PR-235/tags/","tags":"","title":"Tags"}]
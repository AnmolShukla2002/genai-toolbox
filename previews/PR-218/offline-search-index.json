[{"body":"Placeholder for top-level directory.\n","categories":"","description":"All of Toolbox's documentation. \n","excerpt":"All of Toolbox's documentation. \n","ref":"/previews/PR-218/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"How to get started with Toolbox\n","excerpt":"How to get started with Toolbox\n","ref":"/previews/PR-218/getting-started/","tags":"","title":"Getting Started"},{"body":"Introduction This is a placeholder for the introduction.\n","categories":"","description":"An introduction to Toolbox","excerpt":"An introduction to Toolbox","ref":"/previews/PR-218/getting-started/introduction/","tags":"","title":"Introduction"},{"body":"Step 1: Set up a Cloud SQL database Create a Cloud SQL instance. Create a database. Create a database user. Set up a service account. Step 2: Import data into the database Run the command.\ngcloud sql import sql {INSTANCE_NAME} gs://toolbox-quickstart/hotels.gz --database={DATABASE_NAME} (Optional) Explore your data You can explore the data by logging into Cloud SQL Studio and running SQL queries.\nStep 3: Create a tools config file Create a tools.yaml file with the following content, updating the project, database, instance, user, and password fields:\nsources: my-cloud-sql-pg-source: kind: cloud-sql-postgres project: {GCP_PROJECT} region: us-central1 instance: {INSTANCE_NAME} database: {DATABASE_NAME} user: {DATABASE_USER} password: {PASSWORD} tools: search-hotels: kind: postgres-sql source: my-cloud-sql-pg-source description: Search for hotels based on location and name. Returns a list of hotel dictionaries matching the search criteria. parameters: - name: location type: string description: The location of the hotel. - name: name type: string description: The name of the hotel. statement: SELECT * FROM hotels WHERE location ILIKE '%' || $1 || '%' AND name ILIKE '%' || $2 || '%'; book-hotel: kind: postgres-sql source: my-cloud-sql-pg-source description: Book a hotel by its ID. Returns a message indicating whether the hotel was successfully booked or not. parameters: - name: hotel_id type: string description: The ID of the hotel to book. statement: UPDATE hotels SET booked = B'1' WHERE id = $1; update-hotel: kind: postgres-sql source: my-cloud-sql-pg-source description: Update a hotel's check-in and check-out dates by its ID. Returns a message indicating whether the hotel was successfully updated or not. parameters: - name: hotel_id type: string description: The ID of the hotel to update. - name: checkin_date type: string description: The new check-in date of the hotel. - name: checkout_date type: string description: The new check-out date of the hotel. statement: UPDATE hotels SET checkin_date = CAST($2 as date), checkout_date = CAST($3 as date) WHERE id = $1; cancel-hotel: kind: postgres-sql source: my-cloud-sql-pg-source description: Cancel a hotel by its ID. parameters: - name: hotel_id type: string description: The ID of the hotel to cancel. statement: UPDATE hotels SET booked = B'0' WHERE id = $1; NOTE: If your instance belongs to a different region, update the region field.\nThe config file defines four tools: search-hotels, book-hotel, update-hotel and cancel-hotel.\nEach tool specifies its description, kind, source, required parameters and the corresponding SQL statements to execute upon tool invocation.\nStep 4: Start a toolbox server locally Download the latest toolbox binary.\ncurl -O https://storage.googleapis.com/genai-toolbox/v0.0.5/linux/amd64/toolbox NOTE: Use the correct binary corresponding to your OS and CPU architecture.\nProvide binary execution permissions.\nchmod +x toolbox Run the Toolbox server.\n./toolbox --tools_file \"tools.yaml\" Step 5: Start building using Toolbox Install the toolbox_langchain_sdk package.\npip install toolbox_langchain_sdk NOTE: Right now, the toolbox_langchain_sdk package is not available on pip. To use the sdk, download the source code from git and install it locally using the command:\npip install . Create a python script to connect to the toolbox SDK.\nimport asyncio from toolbox_langchain_sdk import ToolboxClient async def main(): client = ToolboxClient(\"http://127.0.0.1:5000\") # All our code will be added here pass asyncio.run(main()) Try out the search-hotels tool.\nsearch_tool = await client.load_tool('search-hotels') response = await search_tool.ainvoke({\"location\": \"Zurich\", \"name\": \"\"}) print(response) Load all tools.\ntools = await client.load_toolset() Install required modules.\npip install langgraph langchain-google-vertexai Create a LangGraph ReAct agent.\nfrom langgraph.prebuilt import create_react_agent from langchain_google_vertexai import ChatVertexAI from langgraph.checkpoint.memory import MemorySaver model = ChatVertexAI(model_name=\"gemini-pro\", project=\"my-project\") # Change the GCP project here agent = create_react_agent(model, tools, checkpointer=MemorySaver()) Define the initial prompt and user queries.\nprompt = \"\"\" You're a helpful hotel assistant. You handle hotel searching, booking and cancellations. When the user searches for a hotel, mention it's name, id, location and price tier. Always mention hotel ids while performing any searches. This is very important for any operations. For any bookings or cancellations, please provide the appropriate confirmation. \"\"\" queries = [ \"Find hotels in Basel with Basel in it's name.\", \"Can you book the Hilton Basel for me?\", \"Oh wait, this is too expensive. Please cancel it and book the Hyatt Regency instead.\", \"My check in dates would be from April 10, 2024 to April 19, 2024.\", ] Run the queries and observe the output!\nconfig = {\"configurable\": {\"thread_id\": \"thread-1\"}} for query in queries: inputs = {\"messages\": [(\"user\", prompt + query)]} response = await agent.ainvoke(inputs, stream_mode=\"values\", config=config) print(response[\"messages\"][-1].content) To verify the agent’s actions, you can examine the hotels table in Cloud SQL Studio. You should observe that the booked column for the Hyatt Regency Basel has changed from 0 to 1, indicating that the hotel has been successfully booked. Additionally, the checkin_date and checkout_date have been updated to 2024-04-10 and 2024-04-19 from 2024-04-02 and 2024-04-20 respectively.\n","categories":"","description":"This guide would help you set up a basic agentic application using toolbox.","excerpt":"This guide would help you set up a basic agentic application using …","ref":"/previews/PR-218/getting-started/quickstart/","tags":"","title":"Toolbox Quickstart"},{"body":"","categories":"","description":"An overview of Toolbox's architecture","excerpt":"An overview of Toolbox's architecture","ref":"/previews/PR-218/concepts/overview/","tags":"","title":"Architecture"},{"body":"","categories":"","description":"Some core concepts in Toolbox","excerpt":"Some core concepts in Toolbox","ref":"/previews/PR-218/concepts/","tags":"","title":"Concepts"},{"body":"","categories":"","description":"How to participate in Toolbox Development","excerpt":"How to participate in Toolbox Development","ref":"/previews/PR-218/development/contributing/","tags":"","title":"Contributing"},{"body":"","categories":"","description":"List of reference documentation for resources in Toolbox","excerpt":"List of reference documentation for resources in Toolbox","ref":"/previews/PR-218/resources/","tags":"","title":"Resources"},{"body":"","categories":"","description":"A list of resources related to development of Toolbox","excerpt":"A list of resources related to development of Toolbox","ref":"/previews/PR-218/development/","tags":"","title":"Development"},{"body":"","categories":"","description":"","excerpt":"","ref":"/previews/PR-218/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/previews/PR-218/tags/","tags":"","title":"Tags"}]